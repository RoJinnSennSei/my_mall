<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/jee 
	http://www.springframework.org/schema/jee/spring-jee.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd">

	<description>Spring-Mybatis配置文件</description>

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:conf/jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="readWriteDataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations">
			<array>
				<value>classpath*:mapper/*.xml</value>
			</array>
		</property>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties">
						<value>
							helperDialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>
		<property name="typeAliasesPackage" value="com.d2c.*.*.entity,com.d2c.*.model,com.d2c.*.*.model" />
	</bean>

	<bean class="com.d2c.mybatis.mapper.expand.config.MapperConfig">
		<property name="basePackage" value="com.d2c.*.*.dao,com.d2c.*.dao" />
		<property name="markerInterface" value="com.d2c.mybatis.mapper.BaseMapper" />
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- DataSource读写分离 -->
	<bean id="readWriteDataSourceTransactionProcessor" class="com.d2c.mybatis.datasource.ReadWriteDataSourceProcessor">
		<property name="forceChoiceReadWhenWrite" value="false" />
	</bean>

	<aop:config>
		<aop:pointcut id="serviceMethods"
			expression="execution(* com.d2c.*.*.service.*Service.*(..)) or execution(* com.d2c.*.service.*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />
		<!-- 通过AOP切面实现读/写库选择 -->
		<aop:aspect order="-2147483648" ref="readWriteDataSourceTransactionProcessor">
			<aop:around pointcut-ref="serviceMethods" method="determineReadOrWriteDB" />
		</aop:aspect>
	</aop:config>

	<!-- 事务AOP动态切片 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" isolation="READ_COMMITTED"
				rollback-for="Exception" timeout="20" />
			<tx:method name="add*" isolation="READ_COMMITTED"
				rollback-for="Exception" timeout="20" />
			<tx:method name="create*" isolation="READ_COMMITTED"
				rollback-for="Exception" timeout="20" />
			<tx:method name="insert*" isolation="READ_COMMITTED"
				rollback-for="Exception" timeout="20" />
			<tx:method name="update*" isolation="READ_COMMITTED"
				rollback-for="Exception" timeout="20" />
			<tx:method name="del*" isolation="READ_COMMITTED"
				rollback-for="Exception" timeout="20" />
			<tx:method name="merge*" isolation="READ_COMMITTED"
				rollback-for="Exception" timeout="20" />
			<tx:method name="remove*" isolation="READ_COMMITTED"
				rollback-for="Exception" timeout="20" />
			<tx:method name="do*" isolation="READ_COMMITTED"
				rollback-for="Exception" timeout="20" />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="count*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="list*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="search*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="build*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception"
				timeout="20" />
		</tx:attributes>
	</tx:advice>

	<bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="5" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="90" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="3000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="readWriteDataSource" />
	</bean>

	<bean id="readWriteDataSource" class="com.d2c.mybatis.datasource.ReadWriteDataSource">
		<property name="writeDataSource" ref="masterDataSource" />
		<property name="readDataSourceMap">
			<map>
				<entry key="slave1DataSource" value-ref="slave1DataSource" />
				<entry key="slave2DataSource" value-ref="slave2DataSource" />
			</map>
		</property>
	</bean>

	<!-- Spring JDBC 直接调用 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="masterDataSource" />
	</bean>
	
	<!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="readWriteDataSource" />
	</bean>-->
	 
	<!-- 配置织入@Aspectj切面 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>