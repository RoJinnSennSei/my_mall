peer.discovery = {

    # 是否开启节点查询
    enabled = true

    # 附近节点种子列表, 搜索同步
    ip.list = [
        # C++ Ethereum discovery nodes
        "5.1.83.226:30303",

        # Geth discovery nodes
        "52.16.188.185:30303",
        "13.93.211.84:30303",
        "191.235.84.50:30303",
        "13.75.154.138:30303",
        "52.74.57.123:30303",

        # Parity discovery nodes
        "163.172.187.252:30303",
        "163.172.157.114:30303",
        "136.243.154.244:30303",
        "88.212.206.70:30303",
        "37.128.191.230:30303",
        "46.20.235.22:30303",
        "216.158.85.185:30303",
        "212.47.247.103:30303",
        "138.201.144.135:30303",
        "45.55.33.62:30303",
        "188.166.255.12:30303",
        "159.203.210.80:30303",
        "51.15.42.252:30303",
        "163.172.171.38:30303"
    ]

    # 外部报表主机,如果未设置使用 http://checkip.amazonaws.com/
    external.ip = null

    # 本地IP: 192.168.1.104 
    # 为空则设置已知地址: www.google.com
    bind.ip = ""

    # 本机地址是否可被发现
    public.home.node = true

    # 发现的节点是否存储在DB中并VM重启之间持久化
    persist = true

    # 连接心跳间隔 (秒), 0表示不重新连接
    touchPeriod = 600

    # 连接最多节点数量, 1为无限的
    touchMaxNodes = 100

    # 测试线程数量[1..10]
    workers = 8
}

peer {
    # 监听接口
    listen.port = 30303

    # Network id 网络ID, 不同ID网络隔离
    networkId = 1

    # peer 私钥, 密钥初始化产生并存储数据库文件夹中
    # derived nodeId = dead745c1dbcde518b48e52aca1e8d5ba666005a2c8804e39826c6080fb11c1e8abe41d1e41896e871f204f790a90fa9781744cccecf492212192a7c56e7673b
    # privateKey = f67c4032a7ff79bbfa7a780331b235c4eb681d51a0704cb1562064fb6c4bced4

    # 节点列表
    active = [
        # Sample entries:
        # { url = "enode://<hex nodeID>@hostname.com:30303" }
        # {
        #    ip = hostname.com
        #    port = 30303
        #    nodeId = e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c
        # }
    ]

    # 可信任节点列表，其传入的连接总是接受的
    trusted = [
        # Sample entries:
        # {nodeId = "e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c"},
        # {ip = "11.22.33.44"},
        # {ip = "11.22.33.*"},
        # {
        #   nodeId = "e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c"
        #   ip = "11.22.33.44"
        # }
    ]

    # 最多可连接节点数量
    maxActivePeers = 30

    # peer可用协议 [eth, shh, bzz]
    capabilities = [eth]

    # 连接超时时间(秒)
    connection.timeout = 2

    # 关闭通道前等待消息时间(秒)
    channel.read.timeout = 90

    p2p {
        # 对外声明版本
        # version = 4

        # 最大帧字节
        framing.maxSize = 32768

        # 按EIP-8格式发送握手信息
        # https://github.com/ethereum/EIPs/blob/master/EIPS/eip-8.md
        eip8 = true
    }
}

# 创世文件配置
genesis = frontier.json

# 创世文件路径，覆盖genesis
# genesisFile = /some/path/to/frontier.json

# 区块链设置(常量和算法)
# 在创世纪的文件中没有描述（比如最小难度或挖掘算法）
# 有可能命名的预集是：
# - main : 主网络 (Frontier-Homestead-...)
# - ropsten: Ropsten 测试网络
# - testnet: Ethercamp 以太网测试网络
# - olympic: pre-Frontier Olympic 网络
# 自定义网络设置，参考 'blockchain.config.class'
blockchain.config.name = "main"

# 自定义网络区块链设置
# 需实现 org.ethereum.config.BlockchainNetConfig
#blockchain.config.class = "org.ethereum.config.net.MainNetConfig"

database {
    # 数据库文件保存地址, 可以是相对绝对路径
    dir = database

    # 系统重启时是否重置数据库，重新从其他节点下载
    reset = false

    # 如果 reset=true, 每次应用重启时自动同步重置为该块号
    # 设置为0, 为全部重置
    resetBlock = 0

    # 系统重启是否从最新备份中恢复，仅支持RocksDB
    fromBackup = false

    # 不兼容数据库版本
    #  * EXIT   - （默认）在std中显示错误，并通过投掷错误退出
    #  * RESET  - 清除数据库目录并继续工作
    #  * IGNORE - 忽略，继续工作，不管可能的问题
    # @since 1.4.0
    incompatibleDatabaseBehavior = EXIT

    # 数据库控制状态调整
    # 调整后的状态消耗更少的磁盘空间（例如，50 G和1 G修剪）
    # 状态只能在最后maxDepth中恢复，原来的状态将会丢失
    prune {
        enabled = true

        # 控制最后一个块的状态没有被删除
        # 不建议将这个值设置为192
        # 因为它可以防止长叉链的重新分支
        # 注意：这个值越大，内存占用就越大:
        #       192: 10 Mb
        #     1_000: 16 Mb
        #    10_000: 58 Mb
        #   100_000: 718 Mb
        # 1_000_000: 5658 Mb
        maxDepth = 192
    }
}

# Cache 配置
cache {

    flush {
        # 写缓冲区 (状态、块、事务) 大小, 单位MB
        # 当写入缓存大小超过这个限制时，数据被刷新到DB
        # value < 0 禁用此选项
        writeCacheSize = 64

        # 强制刷新每个N区块
        # [10000 刷新 10000 区块]
        # 数值 0 表示禁用刷新 
        blocks = 0

        # 同步后是否刷新所有区块
        shortSyncFlush = true
    }

    # state DB 状态缓存大小(MB)
    stateCacheSize = 256

    # block 区块链数据缓存大小(MB)
    blockQueueSize = 32

    # header 头数据缓存大小(MB)
    headerQueueSize = 8

	# state bloom fiter 最大缓存大小(MB)
	# 当到达临界值时，bloom fiter 将被关闭
	# 128M 可以缓存大约 50M条数据
    # DEPRECATED, states bloom fiter 未来将失效
    maxStateBloomSize = 128
}

# eth 节点同步过程
sync {

    # 是否同步
    enabled = true

    # Fast 快速同步参数
    fast {

        # 是否启动 fastsync 快速同步
        # 当 enabled = true 时，需确保sync.enabled节点同步参数启动
        enabled = false

        # 当指定fastsync块检索状态时， 这是快速并安全的快速同步选项
        # 默认: peerBestBlockNumber=1000
        //        pivotBlockHash = 6149ddfd7f52b2aa34a65b15ae117c269b5ff2dc58aa839dd015790553269411

        # 下载state时，是否创建备份
        # 仅由RocksDB支持
        backupState = false
		
		# 下载区块前忽略正文和收据
		# 选项不会影响块的头 block headers
        skipHistory = false
    }

	# 最小同步节点数量
	# 同步过程中可能会大于该数量，但至少会发现这么多
    peer.count = 30

    # 取消该参数
    # Eth 版本
    # version = 62

    # 如果收到冲突状态，是否退出
    # 参数用于调试
    exitOnBlockConflict = false
}

# miner 参数
mine {

	# 是否开始挖矿
	# 如 sync.enabled = true 同步完成后开始挖矿,
	# 否则获取数据库或创世后立即挖矿
    start = false

    # 矿工CPU线程数量
    # 0 即禁止CPU挖矿
    cpuMineThreads = 4

    # CPU挖矿模式选择
    # 'light'模式： 16M RAM 速度较慢
    # 'full'模式: 1G RAM 需要7分钟产生数据集，但是要快的多
    fullDataSet = true

    # 挖矿收益账户
    coinbase = "0000000000000000000000000000000000000000"

    # 挖矿区块外的额外数据, 例如 挖矿人签名
    # 应该指定两个属性中的一个属性
    extraData = "EthereumJ powered"
    #extraDataHex = "0102abcd"

	# 交易最低 gas价格(weis单位)，低于该价格的任务将不会进入挖矿区块
    minGasPrice = 15000000000  # 15 Gwei

    # 挖掘区块间最小超时
    minBlockTimeoutMsec = 0

    # 指定开始 nonce值，可能对测试有用
    # null 表示随机nonce值
    startNonce = null
}

# Solidity 可靠性参数
solc {
	# 可靠性执行文件路径
	# 如果为null，则使用默认可靠性编译器
    path = null
}

# ========================================================
#    Debug 调试和高级选项
# ========================================================

# 等待交易批准时间(秒)
# 交易被确认收到消息抵达的时间
transaction.approve.timeout = 15

# 交易需确认通过块数量，如果是未决交易将被移除
transaction.outdated.threshold = 10

dump {

  # 为了测试所有的状态都会被抛弃
  # 如果dump.full = true, 将以JSON形式转储到dump.dir目录下
  full = false
  dir = dmp

  # vmtrace 明细数据 转到 console 控制台和 style样式
  # block = -1 丢弃块trace消息
  # styles: [pretty/standard+] (default: standard+)
  block = -1
  style = pretty

  # 重启时是否清除dump明细数据
  clean.on.restart = true
}

# 构建追溯
# 收集包含了对象，并以json或其他形式公开给用户。
vm.structured {
  trace = false
  dir = vmtrace
  compressed = true
  initStorageLimit = 10000
}

# 从某块开始追踪
# -1 不进行追踪
trace.startblock = -1

# 启用/禁用 内部交易数据记录
# 单个交易可以收集大量的数据
# 测试时可以禁用它
record.internal.transactions.data = true

# 收到 vm 调用消息，如果vm 未调用，金额是否被转出
play.vm = true

# 问候字符串
hello.phrase = Dev

#  用于调试, 加载某一区块数据到root
# values [-1] - load from db
#        [hex hash 32 bytes] root hash
root.hash.start = null

# 数据源: [rocksdb/leveldb/inmem]
# 'leveldb' 过期 DEPRECATED
keyvalue.datasource = rocksdb

record.blocks=false
blockchain.only=false

# 从 rlp 链文件中加载数据，而不是网络
blocks.loader=""

#crypto settings, such as sign, hash, etc
crypto {
	#JCA cryptoprovider name. 
	providerName="SC"
	#Used for create JCA MessageDigest
	hash.alg256="ETH-KECCAK-256"
	hash.alg512="ETH-KECCAK-512"
}
